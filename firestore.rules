/**
 * @file Firestore Security Rules for Artify AI.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model. Users can only access their own data.
 * @dataStructure All data is nested under /users/{userId}, where {userId} must match the authenticated user's UID. Prompts are stored as subcollections under each user.
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - Only authenticated users can create, read, update, or delete data.
 *   - Data validation is limited to ensuring ownership and preventing modification of the `userId` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profile document, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile document.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { "id": "user123", "email": "user@example.com" }
     * @allow (get) User with ID 'user123' reads their profile document.
     *   - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' updates their profile document.
     *   - request.auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' deletes their profile document.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create a profile document for user 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { "id": "user456", "email": "user@example.com" }
     * @deny (get) User with ID 'user123' attempts to read the profile document of user 'user456'.
     *   - request.auth.uid: 'user123'
     * @deny (update) User with ID 'user123' attempts to update the profile document of user 'user456'.
     *   - request.auth.uid: 'user123'
     * @deny (delete) User with ID 'user123' attempts to delete the profile document of user 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership; users can only access their own profiles.
     */
    match /users/{userId} {
      // Allow a user to create their own profile if the userId matches their auth.uid.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Allow a user to get their own profile.
      allow get: if isSignedIn() && isOwner(userId);
      // Allow a user to update their own profile, ensuring the userId cannot be changed.
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      // Allow a user to delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
      // Listing users is not allowed.
      allow list: if false;

      /**
       * @description Secures the prompts subcollection under a user's profile, ensuring only the authenticated user can access their own prompts.
       * @path /users/{userId}/prompts/{promptId}
       * @allow (create) User with ID 'user123' creates a prompt in their prompts collection.
       *   - request.auth.uid: 'user123'
       *   - request.resource.data: { "userId": "user123", ... }
       * @allow (get) User with ID 'user123' reads a prompt in their prompts collection.
       *   - request.auth.uid: 'user123'
       * @allow (update) User with ID 'user123' updates a prompt in their prompts collection.
       *   - request.auth.uid: 'user123'
       * @allow (delete) User with ID 'user123' deletes a prompt in their prompts collection.
       *   - request.auth.uid: 'user123'
       * @deny (create) User with ID 'user123' attempts to create a prompt in user 'user456's prompts collection.
       *   - request.auth.uid: 'user123'
       *   - request.resource.data: { "userId": "user456", ... }
       * @deny (get) User with ID 'user123' attempts to read a prompt from user 'user456's prompts collection.
       *   - request.auth.uid: 'user123'
       * @deny (update) User with ID 'user123' attempts to update a prompt in user 'user456's prompts collection.
       *   - request.auth.uid: 'user123'
       * @deny (delete) User with ID 'user123' attempts to delete a prompt from user 'user456's prompts collection.
       *   - request.auth.uid: 'user123'
       * @principle Enforces document ownership; users can only access their own prompts.
       */
      match /prompts/{promptId} {
        // Allow a user to create a prompt if the userId matches their auth.uid.
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
        // Allow a user to get their own prompt.
        allow get: if isSignedIn() && isOwner(userId);
        // Allow a user to update their own prompt, ensuring the userId cannot be changed.
        allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
        // Allow a user to delete their own prompt.
        allow delete: if isSignedIn() && isExistingOwner(userId);
        // Only the owner can list their prompts.
        allow list: if isSignedIn() && isOwner(userId);
      }
    }
  }
}

/**
 * @description Checks if the user is signed in.
 * @return {boolean} True if the user is signed in, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}

/**
 * @description Checks if the requested user ID matches the authenticated user's ID.
 * @param {string} userId The user ID to check.
 * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
 */
function isOwner(userId) {
  return request.auth.uid == userId;
}

/**
 * @description Checks if the requested user ID matches the authenticated user's ID and the resource exists.
 * @param {string} userId The user ID to check.
 * @return {boolean} True if the user ID matches the authenticated user's ID and resource exists, false otherwise.
 */
function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
}